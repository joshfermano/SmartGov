{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/utils/supabase/client.js"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr';\nexport function createClient() {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n    if (!supabaseUrl || !supabaseAnonKey) {\n        throw new Error('Missing Supabase environment variables. Please check NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY');\n    }\n    return createBrowserClient(supabaseUrl, supabaseAnonKey);\n}\n// Export singleton client for backward compatibility\nexport const supabase = createClient();\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AACO,SAAS;IACZ,MAAM,cAAc,QAAQ,GAAG,CAAC,wBAAwB;IACxD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;IACjE,IAAI,CAAC,eAAe,CAAC,iBAAiB;QAClC,MAAM,IAAI,MAAM;IACpB;IACA,OAAO,IAAA,yMAAmB,EAAC,aAAa;AAC5C;AAEO,MAAM,WAAW"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/client.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n// Environment variables validation\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables. Please check NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY');\n}\n// Create Supabase client with TypeScript support\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n        flowType: 'pkce', // Use PKCE flow for enhanced security\n    },\n    global: {\n        headers: {\n            'X-Client-Info': 'smartgov@1.0.0',\n        },\n    },\n});\n"],"names":[],"mappings":";;;;AAAA;;AACA,mCAAmC;AACnC,MAAM,cAAc,QAAQ,GAAG,CAAC,wBAAwB;AACxD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;AACjE,IAAI,CAAC,eAAe,CAAC,iBAAiB;IAClC,MAAM,IAAI,MAAM;AACpB;AAEO,MAAM,WAAW,IAAA,+MAAY,EAAC,aAAa,iBAAiB;IAC/D,MAAM;QACF,kBAAkB;QAClB,gBAAgB;QAChB,oBAAoB;QACpB,UAAU;IACd;IACA,QAAQ;QACJ,SAAS;YACL,iBAAiB;QACrB;IACJ;AACJ"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/context.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AuthProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthProvider() from the server but AuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/context.js <module evaluation>\",\n    \"AuthProvider\",\n);\nexport const useAuth = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/context.js <module evaluation>\",\n    \"useAuth\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,oOAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,+DACA;AAEG,MAAM,UAAU,IAAA,oOAAuB,EAC1C;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,+DACA","ignoreList":[0]}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/context.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AuthProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthProvider() from the server but AuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/context.js\",\n    \"AuthProvider\",\n);\nexport const useAuth = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/context.js\",\n    \"useAuth\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,oOAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,2CACA;AAEG,MAAM,UAAU,IAAA,oOAAuB,EAC1C;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,2CACA","ignoreList":[0]}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/components/ProtectedRoute.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ProtectedRoute = registerClientReference(\n    function() { throw new Error(\"Attempted to call ProtectedRoute() from the server but ProtectedRoute is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/components/ProtectedRoute.js <module evaluation>\",\n    \"ProtectedRoute\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,iBAAiB,IAAA,oOAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,iFACA","ignoreList":[0]}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/components/ProtectedRoute.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ProtectedRoute = registerClientReference(\n    function() { throw new Error(\"Attempted to call ProtectedRoute() from the server but ProtectedRoute is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/components/ProtectedRoute.js\",\n    \"ProtectedRoute\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,iBAAiB,IAAA,oOAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,6DACA","ignoreList":[0]}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/components/LoginForm.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/components/LoginForm.js <module evaluation>\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,oOAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,4EACA","ignoreList":[0]}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/components/LoginForm.js/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/packages/auth/dist/components/LoginForm.js\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,oOAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,wDACA","ignoreList":[0]}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/middleware.js"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { NextResponse } from 'next/server';\n// Public routes that don't require authentication\nconst PUBLIC_ROUTES = [\n    '/auth/login',\n    '/auth/register',\n    '/auth/signup',\n    '/auth/forgot-password',\n    '/auth/reset-password',\n    '/auth/callback',\n    '/auth/verify',\n    '/',\n    '/about',\n    '/features',\n    '/contact',\n    '/help',\n    '/privacy',\n    '/terms',\n    '/landing',\n    '/home',\n];\n// Admin-only routes\nconst ADMIN_ROUTES = ['/admin', '/users', '/settings', '/audit', '/reports'];\n// HR routes\nconst HR_ROUTES = ['/submissions/review', '/approvals', '/department'];\nexport async function createAuthMiddleware() {\n    return async function middleware(req) {\n        const pathname = req.nextUrl.pathname;\n        // Create a Supabase client configured for middleware\n        let supabaseResponse = NextResponse.next({\n            request: req,\n        });\n        const supabase = createServerClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY, {\n            cookies: {\n                getAll() {\n                    return req.cookies.getAll();\n                },\n                setAll(cookiesToSet) {\n                    cookiesToSet.forEach(({ name, value, options }) => req.cookies.set(name, value));\n                    supabaseResponse = NextResponse.next({\n                        request: req,\n                    });\n                    cookiesToSet.forEach(({ name, value, options }) => supabaseResponse.cookies.set(name, value, options));\n                },\n            },\n        });\n        // Check if the route is public\n        const isPublicRoute = PUBLIC_ROUTES.some((route) => pathname === route || pathname.startsWith(`${route}/`));\n        // If it's a public route, skip authentication entirely\n        if (isPublicRoute) {\n            return supabaseResponse;\n        }\n        try {\n            // Refresh session if expired - required for Server Components\n            const { data: { user }, error, } = await supabase.auth.getUser();\n            // If there's an auth error, redirect to login\n            if (error) {\n                console.error('Auth middleware error:', error);\n                const redirectUrl = new URL('/auth/login', req.url);\n                redirectUrl.searchParams.set('redirectTo', pathname);\n                return NextResponse.redirect(redirectUrl);\n            }\n            // If no user and accessing protected route, redirect to login\n            if (!user) {\n                const redirectUrl = new URL('/auth/login', req.url);\n                redirectUrl.searchParams.set('redirectTo', pathname);\n                return NextResponse.redirect(redirectUrl);\n            }\n            // If user exists, get the user profile for role checking\n            if (user) {\n                const { data: profile, error: profileError } = await supabase\n                    .from('profiles')\n                    .select('role, is_active')\n                    .eq('id', user.id)\n                    .single();\n                if (profileError || !profile) {\n                    console.error('Profile fetch error:', profileError);\n                    // If profile doesn't exist, redirect to profile setup\n                    if (!pathname.startsWith('/auth/setup')) {\n                        return NextResponse.redirect(new URL('/auth/setup', req.url));\n                    }\n                    return supabaseResponse;\n                }\n                // Check if user account is active\n                if (!profile.is_active) {\n                    return NextResponse.redirect(new URL('/auth/inactive', req.url));\n                }\n                // Check admin routes\n                const isAdminRoute = ADMIN_ROUTES.some((route) => pathname.startsWith(route));\n                if (isAdminRoute && profile.role !== 'admin') {\n                    return NextResponse.redirect(new URL('/unauthorized', req.url));\n                }\n                // Check HR routes\n                const isHrRoute = HR_ROUTES.some((route) => pathname.startsWith(route));\n                if (isHrRoute && !['hr', 'admin'].includes(profile.role)) {\n                    return NextResponse.redirect(new URL('/unauthorized', req.url));\n                }\n                // Add user info to headers for use in server components\n                supabaseResponse.headers.set('x-user-id', user.id);\n                supabaseResponse.headers.set('x-user-role', profile.role);\n            }\n            return supabaseResponse;\n        }\n        catch (error) {\n            console.error('Middleware error:', error);\n            // If there's an unexpected error in protected route, redirect to login\n            const redirectUrl = new URL('/auth/login', req.url);\n            redirectUrl.searchParams.set('redirectTo', pathname);\n            return NextResponse.redirect(redirectUrl);\n        }\n    };\n}\n// Configuration moved to individual app middleware files\n// Helper function to get user from middleware headers in server components\nexport function getUserFromHeaders(headers) {\n    const userId = headers.get('x-user-id');\n    const userRole = headers.get('x-user-role');\n    return userId ? { id: userId, role: userRole } : null;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/packages/auth/dist/index.js"],"sourcesContent":["// Client utilities\nexport { createClient } from './utils/supabase/client';\n// Legacy client export for backward compatibility\nexport { supabase } from './client';\n// Context\nexport { AuthProvider, useAuth } from './context';\n// Components\nexport { ProtectedRoute } from './components/ProtectedRoute';\nexport { LoginForm } from './components/LoginForm';\n// Middleware\nexport { createAuthMiddleware, getUserFromHeaders } from './middleware';\n"],"names":[],"mappings":"AAAA,mBAAmB;;AACnB;AACA,kDAAkD;AAClD;AACA,UAAU;AACV;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/employee/middleware.ts"],"sourcesContent":["import { createAuthMiddleware } from '@smartgov/auth';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nlet middlewarePromise: Promise<any> | null = null;\r\n\r\nexport default async function middleware(request: NextRequest) {\r\n  if (!middlewarePromise) {\r\n    middlewarePromise = createAuthMiddleware();\r\n  }\r\n  const authMiddleware = await middlewarePromise;\r\n  return authMiddleware(request);\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder files\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAGA,IAAI,oBAAyC;AAE9B,eAAe,WAAW,OAAoB;IAC3D,IAAI,CAAC,mBAAmB;QACtB,oBAAoB,IAAA,sKAAoB;IAC1C;IACA,MAAM,iBAAiB,MAAM;IAC7B,OAAO,eAAe;AACxB;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}